.section init
.temps r5, r6, r7

jumptable:
	.space 256
	
table:
	r4 := jumptable
	table_loop:
		m[r0][r4] := input_error
		r4 := r4 + 1
		if(r4 != jumptable+255) goto table_loop

space_init:
	r4 := jumptable + ' '
	m[r0][r4] := waiting

operands_init:
	m[r0][jumptable + '*'] := multiply
	m[r0][jumptable + '+'] := add
	m[r0][jumptable + '-'] := subtract
	m[r0][jumptable + '/'] := divide
	m[r0][jumptable + '|'] := bitwise_or
	m[r0][jumptable + '&'] := bitwise_and
	m[r0][jumptable + 'c'] := negation
	m[r0][jumptable + '~'] := complement
	m[r0][jumptable + 's'] := swap
	m[r0][jumptable + 'd'] := duplicate
	m[r0][jumptable + 'p'] := pop_val
	m[r0][jumptable + 'z'] := pop_all

number_init:
	r4 := jumptable + '0'
	number_init_loop:
		m[r0][r4] := digit
		r4 := r4 + 1
		if(r4 != jumptable + ':') goto number_init_loop
	goto ustart

.section main
.temps r5, r6, r7
.zero r0

run:
	push r3 on stack r2
	goto waiting

end:
	pop r1 off stack r2
	pop r3 off stack r2
	goto r3

waiting:
	r1 := input()

waiting_with_character:
	if(r1 == '\n') goto end
	# goes to corresponding instruction in the jump table
	r4 := jumptable + r1
	r3 := m[r0][r4]
	goto r3

entering:
	r1 := input()
	if (r1 <s '0') goto waiting_with_character
	if (r1 >s '9') goto waiting_with_character
	if (r1 == '+') goto add
	goto entering
	
digit:
	r1 := r1 - '0'
	push r1 on stack r2
	goto entering

input_error:
	push r1 on stack r2
	output "unknown character"
	pop r1 off stack r2
	goto r1

bad_operands:
	output "bad operands"
	goto waiting

multiply:


add:
	output "adding\n"
	if (r2 == check1) goto bad_operands
	if (r2 == check2) goto bad_operands
	pop r3 off stack r2
	pop r4 off stack r2
	r3 := r3 + r4
	push r3 on stack r2
	goto waiting

subtract:

divide:

bitwise_or:

bitwise_and:

negation:

complement:

swap:

duplicate:

pop_val:

pop_all: