.section init
.temps r5, r6, r7

jumptable:
	.space 256
	
table:
	r4 := jumptable
	table_loop:
		m[r0][r4] := input_error
		r4 := r4 + 1
		if(r4 != jumptable+255) goto table_loop

space_init:
	r4 := jumptable + ' '
	m[r0][r4] := waiting

operands_init:
	m[r0][jumptable + '*'] := multiply
	m[r0][jumptable + '+'] := add
	m[r0][jumptable + '-'] := subtract
	m[r0][jumptable + '/'] := divide
	m[r0][jumptable + '|'] := bitwise_or
	m[r0][jumptable + '&'] := bitwise_and
	m[r0][jumptable + 'c'] := negation
	m[r0][jumptable + '~'] := complement
	m[r0][jumptable + 's'] := swap
	m[r0][jumptable + 'd'] := duplicate
	m[r0][jumptable + 'p'] := pop_val
	m[r0][jumptable + 'z'] := pop_all

number_init:
	r4 := jumptable + '0'
	number_init_loop:
		m[r0][r4] := digit
		r4 := r4 + 1
		if(r4 != jumptable + ':') goto number_init_loop
	goto ustart

.section main
.temps r5, r6, r7
.zero r0

run:
	goto waiting

end:
	halt

waiting:
	r3 := input()

waiting_with_character:
	# -1 is EOF
	if(r3 == -1) goto end
	if(r3 == '\n') goto print_stack
	# goes to corresponding instruction in the jump table
	r4 := jumptable + r3
	r4 := m[r0][r4]
	goto r4

entering:
	r3 := input()
	if (r3 == '+') goto add
	if (r3 == '-') goto subtract
	if (r3 == '/') goto divide
	if (r3 == '*') goto multiply
	if (r3 == '|') goto bitwise_or
	if (r3 == 'c') goto negation
	if (r3 == '&') goto bitwise_and
	if (r3 == '0') goto multi_digit
	if (r3 == '1') goto multi_digit
	if (r3 == '2') goto multi_digit
	if (r3 == '3') goto multi_digit
	if (r3 == '4') goto multi_digit
	if (r3 == '5') goto multi_digit
	if (r3 == '6') goto multi_digit
	if (r3 == '7') goto multi_digit
	if (r3 == '8') goto multi_digit
	if (r3 == '9') goto multi_digit
	if (r3 <s '0') goto waiting_with_character	
	if (r3 >s '9') goto waiting_with_character
	goto entering
	
digit:
	r3 := r3 - '0'
	push r3 on stack r1
	goto entering

multi_digit:
	pop r4 off stack r1
	r3 := r3 - '0'
	r4 := r4 * 10
	r4 := r4 + r3
	push r4 on stack r1
	goto entering

input_error:
	output "unknown character\n"
	goto waiting

bad_operands_1:
	output "Stack underflow---expected at least 1 element\n"
	goto waiting

bad_operands_2:
	output "Stack underflow---expected at least 2 elements\n"
	goto waiting

# always link with r3, return value is top of callstack r2
has:
	push r3 on stack r2
	# counter, starts at 1 because we know we just
	# pushed something on the stack
	r4 := 0
	has_loop:
		r3 := valuestack - r4
		if(r3 == r1) goto return_has
		r4 := r4 + 1
		goto has_loop
	return_has:
		pop r3 off stack r2
		push r4 on stack r2 #return value
		goto r3

multiply:
	goto has linking r3
	pop r4 off stack r2
	if (r4 == 1) goto bad_operands_2
	pop r3 off stack r1
	pop r4 off stack r1
	r3 := r3 * r4
	push r3 on stack r1
	goto waiting


add:
	goto has linking r3
	pop r4 off stack r2
	if (r4 == 1) goto bad_operands_2
	pop r3 off stack r1
	pop r4 off stack r1
	r3 := r3 + r4
	push r3 on stack r1
	goto waiting

subtract:
	goto has linking r3
	pop r4 off stack r2
	if (r4 == 1) goto bad_operands_2
	pop r3 off stack r1
	pop r4 off stack r1
	r3 := r3 - r4
	push r3 on stack r1
	goto waiting

divide:
	goto has linking r3
	pop r4 off stack r2
	if (r4 == 1) goto bad_operands_2
	pop r3 off stack r1
	pop r4 off stack r1
	r3 := r4 / r3
	push r3 on stack r1
	goto waiting

bitwise_or:
	goto has linking r3
	pop r4 off stack r2
	if (r4 == 1) goto bad_operands_2
	pop r3 off stack r1
	pop r4 off stack r1
	r3 := r3 | r4
	push r3 on stack r1
	goto waiting

bitwise_and:
	goto has linking r3
	pop r4 off stack r2
	if (r4 == 1) goto bad_operands_2
	pop r3 off stack r1
	pop r4 off stack r1
	r3 := r3 & r4
	push r3 on stack r1
	goto waiting

negation:
	goto has linking r3
	pop r4 off stack r2
	if (r4 == 0) goto bad_operands_1
	pop r3 off stack r1
	r3 := r3 nand r3
	r3 := r3 + 1
	push r3 on stack r1
	goto waiting

complement:

swap:

duplicate:

pop_val:

pop_all: